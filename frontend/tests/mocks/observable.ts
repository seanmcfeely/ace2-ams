import {
  observableInAlertRead,
  observableRead,
  observableTreeRead,
} from "@/models/observable";
import { analysisMetadataReadFactory } from "./analysisMetadata";
import { genericObjectReadFactory } from "./genericObject";

export const observableReadFactory = ({
  context = null,
  expiresOn = null,
  forDetection = false,
  observableRelationships = [],
  tags = [],
  type = genericObjectReadFactory({ value: "testObservableType" }),
  uuid = "observableUuid1",
  value = "TestObservable",
  version = "observableVersion1",
  whitelisted = false,
}: Partial<observableRead> = {}): observableRead => ({
  context: context,
  expiresOn: expiresOn,
  forDetection: forDetection,
  objectType: "observable",
  observableRelationships: observableRelationships,
  tags: tags,
  type: type,
  uuid: uuid,
  value: value,
  version: version,
  whitelisted: whitelisted,
});

export const observableInAlertReadFactory = ({
  analysisMetadata = analysisMetadataReadFactory(),
  context = null,
  dispositionHistory = [],
  expiresOn = null,
  forDetection = false,
  matchingEvents = [],
  observableRelationships = [],
  tags = [],
  type = genericObjectReadFactory({ value: "testObservableType" }),
  uuid = "observableUuid1",
  value = "TestObservable",
  version = "observableVersion1",
  whitelisted = false,
}: Partial<observableInAlertRead> = {}): observableInAlertRead => ({
  analysisMetadata: analysisMetadata,
  context: context,
  dispositionHistory: dispositionHistory,
  expiresOn: expiresOn,
  forDetection: forDetection,
  matchingEvents: matchingEvents,
  objectType: "observable",
  observableRelationships: observableRelationships,
  tags: tags,
  type: type,
  uuid: uuid,
  value: value,
  version: version,
  whitelisted: whitelisted,
});

export const observableTreeReadFactory = ({
  analysisMetadata = analysisMetadataReadFactory(),
  children = [],
  context = null,
  dispositionHistory = [],
  expiresOn = null,
  forDetection = false,
  jumpToUuid = null,
  matchingEvents = [],
  observableRelationships = [],
  tags = [],
  treeUuid = "testTreeUuid",
  type = genericObjectReadFactory({ value: "testObservableType" }),
  uuid = "observableUuid1",
  value = "TestObservable",
  version = "observableVersion1",
  whitelisted = false,
}: Partial<observableTreeRead> = {}): observableTreeRead => ({
  analysisMetadata: analysisMetadata,
  children: children,
  context: context,
  dispositionHistory: dispositionHistory,
  expiresOn: expiresOn,
  forDetection: forDetection,
  jumpToUuid: jumpToUuid,
  matchingEvents: matchingEvents,
  objectType: "observable",
  observableRelationships: observableRelationships,
  tags: tags,
  treeUuid: treeUuid,
  type: type,
  uuid: uuid,
  value: value,
  version: version,
  whitelisted: whitelisted,
});
