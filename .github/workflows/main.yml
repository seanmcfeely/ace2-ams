name: Build and Test

# Runs only when there is a pull request against the main branch
on:
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# All of the jobs run in parallel, but each step within a job is sequential
jobs:
  backend:
    name: Backend
    runs-on: ubuntu-latest

    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
      COOKIES_SAMESITE: lax
      COOKIES_SECURE: False
      JWT_ACCESS_EXPIRE_SECONDS: 900
      JWT_ALGORITHM: HS256
      JWT_REFRESH_EXPIRE_SECONDS: 43200
      JWT_SECRET: supersecret
      POSTGRES_DB: ace
      POSTGRES_USER: ace
      POSTGRES_PASSWORD: supersecret
      DATABASE_URL: postgresql://ace:supersecret@db:5432/ace

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build
        run: docker-compose build api

      - name: Test
        run: docker-compose run -e TESTING=1 api pytest -vv
  frontend:
    name: Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Build
        run: cd frontend && npm install

      - name: Prettier
        run: cd frontend && npx prettier --check .

      - name: ESLint
        run: cd frontend && npx eslint .

      - name: Unit tests
        run: cd frontend && npm run test:unit

  e2e:
    name: End-to-End
    runs-on: ubuntu-latest

    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
      COOKIES_SAMESITE: lax
      COOKIES_SECURE: False
      JWT_ACCESS_EXPIRE_SECONDS: 900
      JWT_ALGORITHM: HS256
      JWT_REFRESH_EXPIRE_SECONDS: 43200
      JWT_SECRET: supersecret
      POSTGRES_DB: ace
      POSTGRES_USER: ace
      POSTGRES_PASSWORD: supersecret
      DATABASE_URL: postgresql://ace:supersecret@db:5432/ace

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run environment
        run: docker-compose up -d

      - name: List containers
        run: docker container list

      - name: API ping
        run: docker exec ace2-ams-gui curl http://ace2-ams:8080/api/ping

      - name: API auth
        run: docker exec ace2-ams-gui curl -X POST -F 'username=analyst' -F 'password=analyst' http://ace2-ams:8080/api/auth

      - name: E2E tests
        run: docker exec -e DEBUG=cypress:* ace2-ams-gui npx cypress run --headless --config video=false,screenshotOnRunFailure=false

      # - name: Add hosts to /etc/hosts
      #   run: sudo echo "127.0.0.1 ace2-ams" | sudo tee -a /etc/hosts
      #
      # - name: E2E tests
      #   uses: cypress-io/github-action@v2
      #   with:
      #     build: docker-compose build
      #     start: docker-compose up -d
      #     wait-on: "http://ace2-ams:8080"
      #     working-directory: frontend
